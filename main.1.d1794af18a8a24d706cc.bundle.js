(window.webpackJsonp=window.webpackJsonp||[]).push([[1],{134:function(n,t,e){e(135),n.exports=e(339)},337:function(n,t,e){var o={"./00.md":338};function s(n){var t=l(n);return e(t)}function l(n){if(!e.o(o,n)){var t=new Error("Cannot find module '"+n+"'");throw t.code="MODULE_NOT_FOUND",t}return o[n]}s.keys=function(){return Object.keys(o)},s.resolve=l,n.exports=s,s.id=337},338:function(n,t){n.exports='<h1 id="react-hooks-にまつわる不安から心を解き放つ話">React Hooks にまつわる不安から心を解き放つ話</h1>\n<hr>\n<h2 id="profile">Profile</h2>\n<p><img src="https://avatars3.githubusercontent.com/u/7392701?s=240&v=4" alt=""></p>\n<br/>\n\n<p>Taka ( @kashira2339 )</p>\n<p>Software engineer at CyberBuzz, Inc.</p>\n<hr>\n<h2 id="react-hooks">React Hooks</h2>\n<br/>\n\n<p><u><em>They let you use state and other React features without writing a class.</em></u></p>\n<br/>\n\n<p>Class を使わずに、コンポーネントに状態や機能を持たせることができる (16.8.0〜</p>\n<hr>\n<h2 id="それまでの世界では">それまでの世界では</h2>\n<br/>\n\n<ul>\n<li>Class Component</li>\n<li>Higher-Order Components</li>\n</ul>\n<br/>\n\n<p>を駆使していた</p>\n<hr>\n<h2 id="class-component">Class Component</h2>\n<br/>\n\n<ul>\n<li>状態とライフサイクルの複雑化</li>\n<li>記述量が多い</li>\n<li>ツールによるコード縮小が困難</li>\n<li><em><strong>実質非推奨（ただし Class Component 削除の予定はない）</strong></em></li>\n</ul>\n<hr>\n<h2 id="higher-order-components">Higher-Order Components</h2>\n<br/>\n\n<ul>\n<li>コンポーネント設計の変更</li>\n<li>&quot;wrapper hell&quot;</li>\n<li><em><strong>Recompose メンテ終了</strong></em></li>\n</ul>\n<hr>\n<h2 id="build-in-hooks">Build-in hooks</h2>\n<br/>\n\n<ul>\n<li><strong>useState</strong></li>\n<li><strong>useEffect</strong></li>\n<li>useReducer</li>\n<li>useContext</li>\n<li>useCallback</li>\n<li>useMemo</li>\n<li>useRef</li>\n<li>useImperativeHandle</li>\n<li>useLayoutEffect</li>\n<li>useDebugValue</li>\n</ul>\n<hr>\n<h3 id="class-component-1">Class Component</h3>\n<pre><code class="language-js">class Example extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      count: 0\n    };\n  }\n  componentDidMount() {\n    document.title = `You clicked ${this.state.count} times`;\n  }\n  componentDidUpdate() {\n    document.title = `You clicked ${this.state.count} times`;\n  }\n  componentWillUnmount() {\n    document.title = ``;\n  }\n  render() {\n    return (\n      &lt;div&gt;\n        &lt;p&gt;You clicked {this.state.count} times&lt;/p&gt;\n        &lt;button onClick={() =&gt; this.setState({ count: this.state.count + 1 })}&gt;\n          Click me\n        &lt;/button&gt;\n      &lt;/div&gt;\n    );\n  }\n}</code></pre>\n<hr>\n<h3 id="function-component-usestate--useeffect">Function Component (useState + useEffect)</h3>\n<pre><code class="language-js">import React, { useState, useEffect } from &quot;react&quot;;\n\nfunction Example() {\n  const [count, setCount] = useState(0);\n\n  useEffect(() =&gt; {\n    document.title = `You clicked ${count} times`;\n    return () =&gt; {\n      document.title = ``;\n    };\n  });\n\n  return (\n    &lt;div&gt;\n      &lt;p&gt;You clicked {count} times&lt;/p&gt;\n      &lt;button onClick={() =&gt; setCount(count + 1)}&gt;Click me&lt;/button&gt;\n    &lt;/div&gt;\n  );\n}</code></pre>\n<hr>\n<h2 id="class-vs-hooks">Class vs Hooks</h2>\n<table>\n<thead>\n<tr>\n<th>Class</th>\n<th>Hooks</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>constructor</code></td>\n<td>don&#39;t need</td>\n</tr>\n<tr>\n<td><code>shouldComponentUpdate</code></td>\n<td>React.memo</td>\n</tr>\n<tr>\n<td><code>render</code></td>\n<td>function body</td>\n</tr>\n<tr>\n<td><code>componentDidMount</code></td>\n<td><code>useEffect</code></td>\n</tr>\n<tr>\n<td><code>componentDidUpdate</code></td>\n<td><code>useEffect</code></td>\n</tr>\n<tr>\n<td><code>componentWillUnmount</code></td>\n<td><code>useEffect</code></td>\n</tr>\n</tbody></table>\n<hr>\n<h2 id="rules">Rules</h2>\n<br/>\n\n<ul>\n<li><strong>Only Call Hooks at the Top Level</strong><ul>\n<li>Hooks は常に Function Component のトップレベルで呼び出す</li>\n<li>ループの中やネストされた関数内で Hooks を呼び出してはいけない</li>\n</ul>\n</li>\n<li><strong>Only Call Hooks from React Functions</strong><ul>\n<li>通常の JavaScript 関数内から呼び出さないようにする</li>\n<li>React コンポーネントもしくは Custom Hooks からのみ呼び出す</li>\n</ul>\n</li>\n</ul>\n<br/>\n\n<p><em><strong>Hooks は全てのレンダリングにおいて同じ順序で呼び出される必要がある</strong></em></p>\n<ul>\n<li><a href="https://reactjs.org/docs/hooks-rules.html">https://reactjs.org/docs/hooks-rules.html</a></li>\n<li><a href="https://medium.com/@ryardley/react-hooks-not-magic-just-arrays-cd4f1857236e">https://medium.com/@ryardley/react-hooks-not-magic-just-arrays-cd4f1857236e</a></li>\n<li><a href="https://gist.github.com/mizchi/fa00890df2c8d1f27b9ca94b5cb8dd1d">https://gist.github.com/mizchi/fa00890df2c8d1f27b9ca94b5cb8dd1d</a></li>\n</ul>\n<hr>\n<h2 id="examples">Examples</h2>\n<pre><code class="language-js">// 悪い例：条件の中でHooksを呼ぶ。Hooksの呼び出し順が壊れうる\nif (location.pathname !== &quot;/&quot;) {\n  useEffect(() =&gt; {\n    document.title = `new page`;\n  });\n}\n\n// 良い例：\nuseEffect(() =&gt; {\n  if (location.pathname !== &quot;/&quot;) {\n    document.title = `new page`;\n  }\n});</code></pre>\n<hr>\n<h2 id="lint-rule">Lint Rule</h2>\n<pre><code class="language-sh">npm install eslint-plugin-react-hooks --save-dev</code></pre>\n<pre><code class="language-json">// Your ESLint configuration\n{\n  &quot;plugins&quot;: [&quot;react-hooks&quot;],\n  &quot;rules&quot;: {\n    &quot;react-hooks/rules-of-hooks&quot;: &quot;error&quot;, // Checks rules of Hooks\n    &quot;react-hooks/exhaustive-deps&quot;: &quot;warn&quot; // Checks effect dependencies\n  }\n}</code></pre>\n<hr>\n<h2 id="custom-hooks">Custom Hooks</h2>\n<pre><code class="language-js">import { useEffect, useState } from &quot;react&quot;;\n\n// hook\nconst useTimeout = (ms: number = 0) =&gt; {\n  const [ready, setReady] = useState(false);\n\n  useEffect(() =&gt; {\n    const timer = setTimeout(() =&gt; {\n      setReady(true);\n    }, ms);\n\n    return () =&gt; {\n      clearTimeout(timer);\n    };\n  }, [ms]);\n\n  return ready;\n};\n\n// component\nconst Demo = () =&gt; {\n  const ready = useTimeout(2000);\n\n  return &lt;div&gt;Ready: {ready ? &quot;Yes&quot; : &quot;No&quot;}&lt;/div&gt;;\n};</code></pre>\n<hr>\n<h2 id="custom-hooks-library">Custom Hooks Library</h2>\n<br/>\n\n<ul>\n<li><a href="https://github.com/streamich/react-use">react-use</a> (library)</li>\n</ul>\n<hr>\n<h2 id="これまでから来た-react">これまでから来た React</h2>\n<br/>\n\n<ul>\n<li>React Hooks が入るバージョンは後方互換性がある</li>\n<li>Class Component 廃止の予定はない<ul>\n<li>既存クラスを無理やり Hooks で書き換える必要まではない</li>\n</ul>\n</li>\n<li>新しく作るコンポーネントは Functional Component で作れる<ul>\n<li>共存に問題はない</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id="これからはじめる-react">これからはじめる React</h2>\n<br/>\n\n<ul>\n<li>TypeScript 推奨</li>\n<li>全てを Functional Component で書く</li>\n<li>状態やライフサイクル、コンポーネントの機能は Hooks で実装<ul>\n<li>まだ Class にしかない機能に相当する Hooks\b は近いうちに追加予定</li>\n<li>Lifecycle の <code>getSnapshotBeforeUpdate</code> や <code>componentDidCatch</code></li>\n</ul>\n</li>\n<li>HOC は可能な限り使わない（ライブラリが提供するものを除く）<ul>\n<li>ライブラリ側も対応の意向を見せている（ex: react-redux</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h1 id="end">END</h1>\n'}},[[134,3,5]],[0]]);